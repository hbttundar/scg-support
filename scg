#!/bin/bash
set -e

# SCG Support Tool

# Variables
GO_VERSION="1.24.5"

# Tools
GOLANGCI_LINT="golangci-lint"
GOVULNCHECK="govulncheck"
GOSEC="gosec"

# Function to show help message
show_help() {
  echo "SCG Support Tool"
  echo "Available commands:"
  echo "  build        - Build the code"
  echo "  test         - Run tests with race detection and coverage"
  echo "  lint         - Run linter on the codebase"
  echo "  lint-fix     - Run linter and fix issues automatically when possible"
  echo "  security     - Run security checks (govulncheck and gosec)"
  echo "  ci           - Run all CI checks (build, test, lint, security)"
  echo "  install-tools - Install required tools"
  echo "  help         - Show this help message"
}

# Function to build the code
build_code() {
  echo "Building code..."
  go build -v ./...
  echo "Build successful!"
}

# Function to run tests
run_tests() {
  echo "Running tests..."
  go test -race -v -parallel 4 -coverprofile=coverage.txt -covermode=atomic ./...
  echo "Tests passed!"
}

# Function to install required tools
install_tools() {
  echo "Installing required tools..."

  # Install golangci-lint if not already installed
  if ! command -v ${GOLANGCI_LINT} &> /dev/null; then
    echo "Installing golangci-lint..."
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  fi

  # Install govulncheck if not already installed
  if ! command -v ${GOVULNCHECK} &> /dev/null; then
    echo "Installing govulncheck..."
    go install golang.org/x/vuln/cmd/govulncheck@latest
  fi

  # Install gosec if not already installed
  if ! command -v ${GOSEC} &> /dev/null; then
    echo "Installing gosec..."
    go install github.com/securego/gosec/v2/cmd/gosec@latest
  fi

  echo "Done."
}

# Function to run the linter
run_lint() {
  echo "Running linter..."
  if ! command -v ${GOLANGCI_LINT} &> /dev/null; then
    echo "${GOLANGCI_LINT} not found, installing..."
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  fi
  ${GOLANGCI_LINT} run --timeout=5m --concurrency=4
  echo "Linting passed!"
}

# Function to run the linter and fix issues
run_lint_fix() {
  echo "Running linter and fixing issues..."
  if ! command -v ${GOLANGCI_LINT} &> /dev/null; then
    echo "${GOLANGCI_LINT} not found, installing..."
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  fi
  ${GOLANGCI_LINT} run --fix --timeout=5m --concurrency=4
  echo "Linting and fixing completed!"
}

# Function to run security checks
run_security() {
  echo "Running security checks..."
  # Install security tools if not already installed
  if ! command -v ${GOVULNCHECK} &> /dev/null; then
    echo "${GOVULNCHECK} not found, installing..."
    go install golang.org/x/vuln/cmd/govulncheck@latest
  fi
  if ! command -v ${GOSEC} &> /dev/null; then
    echo "${GOSEC} not found, installing..."
    go install github.com/securego/gosec/v2/cmd/gosec@latest
  fi

  # Run security tools
  echo "Running govulncheck..."
  ${GOVULNCHECK} ./...
  echo "Running gosec..."
  ${GOSEC} -quiet -exclude-dir=.git -exclude-dir=.github ./...
  echo "Security checks passed!"
}

# Function to run all CI checks
run_ci() {
  echo "Running CI checks locally..."

  # Check Go version
  echo "Using Go version: ${GO_VERSION}"
  INSTALLED_GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
  if [[ "$INSTALLED_GO_VERSION" != "$GO_VERSION" ]]; then
    echo "Warning: Using Go version $INSTALLED_GO_VERSION instead of $GO_VERSION"
  fi

  # Run all CI steps
  build_code
  run_tests
  run_lint
  run_security

  echo "All CI checks passed successfully!"
}

# Main execution
case "$1" in
  "build")
    build_code
    ;;
  "test")
    run_tests
    ;;
  "lint")
    run_lint
    ;;
  "lint-fix")
    run_lint_fix
    ;;
  "security")
    run_security
    ;;
  "ci")
    run_ci
    ;;
  "install-tools")
    install_tools
    ;;
  "help" | "")
    show_help
    ;;
  *)
    echo "Unknown command: $1"
    show_help
    exit 1
    ;;
esac

exit 0
